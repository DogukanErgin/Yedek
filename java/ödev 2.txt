public class Rectangle {

    private double kisa;
    private double uzun;
    private double x;
    private double y;

    public Rectangle (double kisa, double uzun) {
        this.kisa=kisa;
        this.uzun=uzun;
    }


    public void setKisa(double S){
        this.kisa=kisa;
    }
    public double getKisa () {
        return kisa;
    }
    public void setUzun (double L) {
        this.uzun=uzun;
    }
    public double getUzun () {
        return uzun;

    }
    public void setX(double S){
        this.x=x;
    }
    public double getX () {
        return x;
    }
    public void setY (double L) {
        this.y=y;
    }
    public double getY () {
        return y;

    }
    //setter Getter (setKisa,getKisa ,,,setX, getX ,..)

    public void move(double deltaX, double deltaY) {
        x=x+deltaX;
        y=y+deltaY;
    }

    public double getPerimeter (double aKisa, double aUzun){
        return (2*(aKisa*aUzun));
    }
    public double getArea (double S1, double L1){
        return(S1*L1);
    }

}



import static java.lang.Math.pow;
import static java.lang.Math.sqrt;

public class Point {
    private double x;
    private double y;

    public Point (double x, double y){
        this.x=x;
        this.y=y;
    }
    public Point (Point obj){
x=obj.x;
y=obj.y;

    }
    public void setX ( double x1){
        this.x=x1;

    }
    public double getX () {
        return x;

    }
    public void setY (double y1) {
        this.y=y1;
    }
    public double getY (){
        return y;
    }

    public double distance (Point p){


return(Math.sqrt((p.x)*(p.x)-0+(p.y)*(p.y)-0));



    }
    public Point findClosest (Point [] pointArray){     //"2,1,3,4,6,2,1,4,"  "1,2,4,5,3,2,5,6
double enbüyük=0;
        for (int i = 0; i <pointArray.length ; i++) {


if(pointArray[i].distance(pointArray[i])>pointArray[i+1].distance(pointArray[i+1])){
    enbüyük=pointArray[i].distance(pointArray[i]);

            }
            if(pointArray[i].distance(pointArray[i])<pointArray[i+1].distance(pointArray[i+1])){
enbüyük=pointArray[i+1].distance(pointArray[i+1]);
            }
        }


  return (pointArray[(int)enbüyük]);

    }
    public static Point findFurthest(Point [] pointArray){
        return (pointArray[1]);
    }



}




